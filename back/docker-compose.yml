version: '3.9'


services:
  user-service_db:
    image: 'postgres:16'
    restart: on-failure
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=user_db
    volumes:
      - user_service_project:/var/lib/postgresql/data
    networks:
      - testing
      - kafka-net

  catalog-service_db:
    image: 'postgres:16'
    restart: on-failure
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=catalog_db
    volumes:
      - catalog_service_project:/var/lib/postgresql/data
    networks:
      - kafka-net

  order-service_db:
    image: 'postgres:16'
    restart: on-failure
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=order_db
    volumes:
      - order_service_project:/var/lib/postgresql/data
    networks:
      - kafka-net
      - testing

  warehouse-service_db:
    image: 'postgres:16'
    restart: on-failure
    ports:
      - "5437:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=warehouse_db
    volumes:
      - warehouse_service_project:/var/lib/postgresql/data
    networks:
      - testing
      - kafka-net


  user-service:
    restart: always
    build: ./user-service
    ports:
      - "8082:8082"
    depends_on:
      - user-service_db
    environment:
      SPRING_DATASOURCE_URL: 'jdbc:postgresql://user-service_db:5432/user_db'
    networks:
      - testing
      - kafka-net

  catalog-service:
    restart: always
    build: ./catalog-service
    ports:
      - "8083:8083"
    depends_on:
      - catalog-service_db
      - kafka
    environment:
      SPRING_DATASOURCE_URL: 'jdbc:postgresql://catalog-service_db:5432/catalog_db'
      KAFKA_BOOTSTRAP_SERVERS: 'kafka:9092'
    networks:
      - kafka-net
      - testing
      - shared-network

  order-service:
    restart: always
    build: ./order-service
    ports:
      - "8084:8084"
    depends_on:
      - order-service_db
      - kafka
    environment:
      SPRING_DATASOURCE_URL: 'jdbc:postgresql://order-service_db:5432/order_db'
      KAFKA_BOOTSTRAP_SERVERS: 'kafka:9092'
    networks:
      - kafka-net


  warehouse-service:
    restart: always
    build: ./warehouse-service
    ports:
      - "8086:8086"
    depends_on:
      - warehouse-service_db
    environment:
      SPRING_DATASOURCE_URL: 'jdbc:postgresql://warehouse-service_db:5432/warehouse_db'
    networks:
      - testing
      - kafka-net

  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    container_name: zookeeper
    restart: on-failure
    ports:
      - "2181:2181"
    networks:
      - kafka-net
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181

  kafka:
    image: 'confluentinc/cp-kafka:latest'
    container_name: kafka
    restart: on-failure
    hostname: kafka
    networks:
      - kafka-net
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
        KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        ADVERTISED_HOST_NAME: kafka
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
        KAFKA_DEFAULT_REPLICATION_FACTOR: "1"


  minio-service:
    restart: always
    build: ./minio
    ports:
      - "8090:8090"
    depends_on:
      - minio
    environment:
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    networks:
      - minio-network
      - shared-network

  minio:
    image: quay.io/minio/minio
    container_name: minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    networks:
      - minio-network
      - shared-network



networks:
  kafka-net:
  testing:
  minio-network:
  shared-network:

volumes:
  user_service_project:
  catalog_service_project:
  order_service_project:
  review_service_project:
  warehouse_service_project:



